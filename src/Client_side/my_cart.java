package Client_side;

import java.awt.Toolkit;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.sql.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author descifrado
 */
public class my_cart extends javax.swing.JFrame 
{
    private DefaultComboBoxModel model;
    private final String user_name;
    private final Socket client;
    private DataOutputStream dos;
    private DataInputStream dis;
    private DefaultTableModel tm;
    
    public my_cart(Socket client, String user_name) 
    {
        initComponents();
        Toolkit tk=Toolkit.getDefaultToolkit();
        int sht=(int)tk.getScreenSize().getHeight();
        int swd=(int)tk.getScreenSize().getWidth();
        int ht=500;
        int wd=900;
        int x=swd-wd;
        int y=sht-ht;
        this.setBounds(x/2, y/2, wd, ht+40);
        this.setResizable(false);
        this.setTitle("SACRED BAZAR: My Cart");   
        this.client=client;
        this.user_name=user_name;
        try 
        {
            dis=new DataInputStream(client.getInputStream());
            dos=new DataOutputStream(client.getOutputStream());
        }
        catch (IOException ex) 
        {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(my_cart.class.getName()).log(Level.SEVERE, null, ex);
        }       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        LOGOLabel = new javax.swing.JLabel();
        TITLELabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        MCTB = new javax.swing.JTable();
        UNCB = new javax.swing.JComboBox();
        DCBT = new javax.swing.JButton();
        GBBT = new javax.swing.JButton();
        CSBT = new javax.swing.JButton();
        PPLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setLayout(null);

        LOGOLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/LOGO_smaller.jpg"))); // NOI18N
        jPanel1.add(LOGOLabel);
        LOGOLabel.setBounds(60, 10, 60, 60);

        TITLELabel.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        TITLELabel.setText("MY CART");
        jPanel1.add(TITLELabel);
        TITLELabel.setBounds(130, 20, 200, 40);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("SIGNED IN AS:");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(530, 30, 110, 20);

        MCTB.setBackground(new java.awt.Color(215, 218, 243));
        MCTB.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        MCTB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PRODUCT ID", "PRODUCT NAME", "PRICE", "QUANTITY", "DATE ADDED"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(MCTB);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(22, 100, 860, 260);

        UNCB.setBackground(new java.awt.Color(215, 218, 243));
        UNCB.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        UNCB.setModel(new DefaultComboBoxModel());
        UNCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UNCBActionPerformed(evt);
            }
        });
        jPanel1.add(UNCB);
        UNCB.setBounds(670, 20, 180, 40);

        DCBT.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DCBT.setText("DELETE FROM CART");
        DCBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DCBTActionPerformed(evt);
            }
        });
        jPanel1.add(DCBT);
        DCBT.setBounds(20, 430, 180, 40);

        GBBT.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        GBBT.setText("GENERATE BILL");
        GBBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GBBTActionPerformed(evt);
            }
        });
        jPanel1.add(GBBT);
        GBBT.setBounds(380, 430, 160, 40);

        CSBT.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CSBT.setText("CONTINUE SHOPPING");
        CSBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CSBTActionPerformed(evt);
            }
        });
        jPanel1.add(CSBT);
        CSBT.setBounds(710, 430, 170, 40);

        PPLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        PPLabel.setText("Select Product Id Only");
        jPanel1.add(PPLabel);
        PPLabel.setBounds(50, 410, 130, 20);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("PREVIEW YOUR ORDER BEFORE GENERATING BILL");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(340, 410, 270, 20);

        jLabel1.setBackground(new java.awt.Color(204, 204, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BAckground.jpg"))); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 0, 900, 500);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UNCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UNCBActionPerformed
        String select=(String)model.getSelectedItem();
        if(select.equals("My Orders"))
        {
            new my_orders(client, user_name).show();
            this.dispose();
        }
        
        if(select.equals("Profile"))
        {
            try
            {
                new cust_profile(client,user_name).show();
            }
            catch (IOException ex) 
            {
                Logger.getLogger(my_cart.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.dispose();
        }
        if(select.equals("Log out"))
        {
            int i=JOptionPane.showConfirmDialog(this,"Are You Sure You Want To Log out?",null,JOptionPane.YES_NO_OPTION);
            if(i==0)
            {
                try
                {
                    String request="Log_out";
                    dos.writeUTF(request);
                    String response=dis.readUTF();
                    if(response.equals("done"))
                    {
                        JOptionPane.showMessageDialog(this, "Successfully Logged Out");
                        new MainPage().show();
                        this.dispose();
                    }
                }
                catch (IOException ex)
                {
                    System.out.println("Client Error"+ex.getMessage());
                    Logger.getLogger(first_page.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
    }//GEN-LAST:event_UNCBActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        model=(DefaultComboBoxModel)UNCB.getModel();
        tm=(DefaultTableModel) MCTB.getModel();
        model.addElement(user_name);
        model.addElement("Profile");
        model.addElement("My Orders");
        model.addElement("Log out");
        try
        {
            String request="MyCart";
            dos.writeUTF(request);
            String response=dis.readUTF();
            if(response.equals("")==false)
            {                
                String row[]=response.split("@");
                int l=row.length;
                for(int i=0;i<l;i++)
                {
                    String data[]=row[i].split("`");
                    tm.addRow(new Object[]{data[0],data[1],data[2],data[3],data[4]});            
                }
            }
        }
        catch (IOException ex) 
        {
            Logger.getLogger(my_cart.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_formWindowOpened

    private void DCBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DCBTActionPerformed
        // TODO add your handling code here:
        int r=MCTB.getSelectedRow();
        int c=0;
        if(r>=0)
        {
            try 
            {
                String pi=(String) tm.getValueAt(r, c);
                String request="DC"+pi;
                dos.writeUTF(request);
                dos.writeUTF((String) tm.getValueAt(r,3));
                String response=dis.readUTF();
                if(response.equals("done"))
                {
                    tm.removeRow(r);
                }
            }
            catch (IOException ex) 
            {
                Logger.getLogger(my_cart.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Select A Product Id");
        }
    }//GEN-LAST:event_DCBTActionPerformed

    private void CSBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CSBTActionPerformed
        try
        {
            // TODO add your handling code here:
            new All_Products(client, user_name).show();
        }
        catch (IOException ex) 
        {
            Logger.getLogger(my_cart.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }//GEN-LAST:event_CSBTActionPerformed

    private void GBBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GBBTActionPerformed
        // TODO add your handling code here:
        int i=JOptionPane.showConfirmDialog(this,"Do You Want To Confirm Order.?",null,JOptionPane.YES_NO_OPTION);
        if(i==0)
        {
            String response="",ti="";
            try 
            {
                dos.writeUTF("addTransaction");
                ti=dis.readUTF();
                response=dis.readUTF();
            }
            catch (IOException ex) 
            {
                Logger.getLogger(my_cart.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(response.equals("done"))
            {
                String oc="";
                String data[]={"","",""};
                double Dis=0.0;
                boolean flag=false;
                JOptionPane.showMessageDialog(this, "Transaction Saved Successfully: Proceed To Generate Invoice");
                try
                {
                    dos.writeUTF("getOfferCode");
                    oc=dis.readUTF();
                    System.out.println(oc);
                    data=oc.split("`");
                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                    LocalDateTime ldt=LocalDateTime.now();
                    String str=dtf.format(ldt).toString().substring(0,10);
                    System.out.println("outside cond"+str);
                    if(data[2].equals("null")==false && data[2].compareTo(str)>0)
                    {
                        System.out.println("inside cond");
                        flag=true;
                    }
                }
                catch (IOException ex) 
                {
                    Logger.getLogger(my_cart.class.getName()).log(Level.SEVERE, null, ex);
                }                
                String bill="";
                
                bill="\t\t       INVOICE\n\n";
                bill+="=======================================================================\n";
                bill+="TRANSACTION ID: "+ti+"\n";
                bill+="USER NAME: "+user_name+"\n";
                bill+="DATE: "+"2018/05/06"+"\n";
                bill+="=======================================================================\n";
                bill+="PRODUCT ID\t| PRODUCT NAME\t| QUANTITY\t| PRICE\t| AMOUNT\n";
                int l=tm.getRowCount();
                double sum=0;
                for(int s=0;s<l;s++)
                {
                    bill+=MCTB.getValueAt(s, 0)+"\t";
                    bill+=MCTB.getValueAt(s, 1)+"\t\t";
                    bill+=MCTB.getValueAt(s, 3)+"\t";
                    bill+=MCTB.getValueAt(s, 2)+"\t";
                    double amt;
                    amt = Integer.parseInt((String)MCTB.getValueAt(s, 2))*Integer.parseInt((String)MCTB.getValueAt(s, 3));
                    sum+=amt;
                    bill+=amt+"\t";
                    bill+="\n";
                }
                if(flag==true)
                {
                    Dis=Double.parseDouble(data[1].substring(0,2))/100*sum;
                    bill+="\nDiscount\t "+data[0]+"\t"+data[1]+"\t\t\t"+Dis+"\n";
                }
                bill+="=======================================================================\n";
                bill+="Total Amount To Be Payed:\t\t\t\t"+(sum-Dis);
                new bill(client,user_name,bill).show();
                this.dispose();
            }           
        }   
    }//GEN-LAST:event_GBBTActionPerformed

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CSBT;
    private javax.swing.JButton DCBT;
    private javax.swing.JButton GBBT;
    private javax.swing.JLabel LOGOLabel;
    private javax.swing.JTable MCTB;
    private javax.swing.JLabel PPLabel;
    private javax.swing.JLabel TITLELabel;
    private javax.swing.JComboBox UNCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
